basePath: /
definitions:
  ds.AddCityIntoHikeReq:
    properties:
      city_id:
        example: 1
        type: integer
      serial_number:
        example: 1
        type: integer
    required:
    - city_id
    - serial_number
    type: object
  ds.AddCityIntoHikeResp:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  ds.AddCityResp:
    properties:
      city_id:
        type: string
      status:
        type: string
    type: object
  ds.CitiesListResp:
    properties:
      basket_id:
        type: string
      cities:
        items:
          $ref: '#/definitions/ds.City'
        type: array
      status:
        type: string
    type: object
  ds.City:
    properties:
      city_name:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      status:
        $ref: '#/definitions/ds.CityStatus'
      status_id:
        type: integer
    type: object
  ds.CityStatus:
    properties:
      id:
        type: integer
      status_name:
        type: string
    type: object
  ds.DeleteCityReq:
    properties:
      id:
        type: string
    type: object
  ds.DeleteCityRes:
    properties:
      deleted_id:
        type: integer
    type: object
  ds.LoginSwaggerResp:
    properties:
      access_token:
        type: string
      expires_in:
        type: string
      token_type:
        type: string
    type: object
  ds.RegisterReq:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  ds.UpdateCityReq:
    properties:
      city_name:
        type: string
      description:
        type: string
      id:
        type: integer
      status_id:
        type: integer
    required:
    - id
    type: object
  ds.UpdateCityResp:
    properties:
      city_name:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      status_id:
        type: string
    type: object
  handler.errorResp:
    properties:
      description:
        example: Описание ошибки
        type: string
      status:
        example: error
        type: string
    type: object
host: localhost:7070
info:
  contact:
    email: dimapermyakov55@gmai.com
    name: API Support
    url: https://github.com/mightyK1ngRichard
  description: Viking's hikes
  title: VIKINGS
  version: "1.0"
paths:
  /api/v3/cities:
    delete:
      consumes:
      - application/json
      description: Удаление города по его идентификатору.
      parameters:
      - description: ID города для удаления
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ds.DeleteCityReq'
      produces:
      - application/json
      responses:
        "200":
          description: Город успешно удален
          schema:
            $ref: '#/definitions/ds.DeleteCityRes'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      security:
      - ApiKeyAuth: []
      summary: Удаление города
      tags:
      - Города
    get:
      description: Получение города(-ов) и фильтрация при поиске
      parameters:
      - description: Получаем определённый город
        in: query
        name: city
        type: string
      - description: Фильтрация поиска
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ds.CitiesListResp'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      summary: Список городов
      tags:
      - Города
    post:
      consumes:
      - multipart/form-data
      description: Создание города
      parameters:
      - description: Название города
        in: formData
        name: city_name
        required: true
        type: string
      - description: ID статуса города
        in: formData
        name: status_id
        required: true
        type: integer
      - description: Описание города
        in: formData
        name: description
        required: true
        type: string
      - description: Изображение города
        in: formData
        name: image_url
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ds.AddCityResp'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      security:
      - ApiKeyAuth: []
      summary: Создание города
      tags:
      - Города
    put:
      consumes:
      - application/json
      description: Обновление информации о городе
      parameters:
      - description: Обновленная информация о городе
        in: body
        name: updated_city
        required: true
        schema:
          $ref: '#/definitions/ds.UpdateCityReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ds.UpdateCityResp'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      security:
      - ApiKeyAuth: []
      summary: Обновление информации о городе
      tags:
      - Города
  /api/v3/cities/add-city-into-hike:
    post:
      consumes:
      - application/json
      description: Добавление города в корзину. Если корзина не найдена, она будет
        сформирована
      parameters:
      - description: Данные для добавления города в поход
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ds.AddCityIntoHikeReq'
      produces:
      - application/json
      responses:
        "200":
          description: ID из destinationHikes
          schema:
            $ref: '#/definitions/ds.AddCityIntoHikeResp'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      security:
      - ApiKeyAuth: []
      summary: Добавление города в поход
      tags:
      - Города
  /api/v3/users/login:
    post:
      consumes:
      - application/json
      description: Вход нового пользователя.
      parameters:
      - description: Детали входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ds.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/ds.LoginSwaggerResp'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      summary: Аутентификация пользователя
      tags:
      - Пользователи
  /api/v3/users/logout:
    get:
      consumes:
      - application/json
      description: Завершение сеанса текущего пользователя.
      parameters:
      - default: '"Bearer "'
        description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешный выход
          schema:
            type: string
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/handler.errorResp'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/handler.errorResp'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/handler.errorResp'
      security:
      - ApiKeyAuth: []
      summary: Выход пользователя
      tags:
      - Пользователи
  /api/v3/users/sign_up:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя.
      parameters:
      - description: Детали регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ds.RegisterReq'
      produces:
      - application/json
      responses: {}
      summary: Регистрация пользователя
      tags:
      - Пользователи
  /ping:
    get:
      description: very friendly response
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Show hello text
      tags:
      - Tests
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
